// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/order/repository.go
//
// Generated by this command:
//
//	mockgen -source=internal/domain/order/repository.go -destination=internal/domain/services/mocks/order/mock_order_repository.go -package=order
//

// Package order is a generated GoMock package.
package order

import (
	reflect "reflect"
	time "time"

	entities "github.com/tulioguaraldob/luizalabs-logistica-challenge/internal/domain/entities"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockRepository) Add(order *entities.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", order)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockRepositoryMockRecorder) Add(order any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockRepository)(nil).Add), order)
}

// Get mocks base method.
func (m *MockRepository) Get(id uint) (*entities.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", id)
	ret0, _ := ret[0].(*entities.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockRepositoryMockRecorder) Get(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRepository)(nil).Get), id)
}

// GetAll mocks base method.
func (m *MockRepository) GetAll() ([]*entities.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]*entities.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockRepositoryMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockRepository)(nil).GetAll))
}

// GetByInterval mocks base method.
func (m *MockRepository) GetByInterval(startDate, endDate time.Time) ([]*entities.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByInterval", startDate, endDate)
	ret0, _ := ret[0].([]*entities.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByInterval indicates an expected call of GetByInterval.
func (mr *MockRepositoryMockRecorder) GetByInterval(startDate, endDate any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByInterval", reflect.TypeOf((*MockRepository)(nil).GetByInterval), startDate, endDate)
}
